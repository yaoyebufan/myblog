package com.sunyue.myblog.controller;

import com.sunyue.myblog.commons.EmptyUtil;
import org.apache.catalina.servlet4preview.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * 文件上传
 */
@CrossOrigin
@Controller
public class FileController {
    private static String UPLOADED_FOLDER = "src/main/resources/static/upload/";

    @GetMapping(value = "/file")
    public String file() {
        return "fileup";
    }

    private Map<String, Object> deleteFileUtil(String params) {
        /*进来的是一个../images/5770871d-3e20-4f62-804e-f17f0ac0d562.jpg虚拟地址，对应实际地址需要截取处理*/
        params = params.substring(params.lastIndexOf("/") + 1);
        Map<String, Object> map = new HashMap<String, Object>();
        String url = UPLOADED_FOLDER + params;
        File file = new File(url);
        String path = file.getAbsolutePath();
        File filedel = new File(path);
        if (!filedel.exists()) {
            map.put("success", 0);
            map.put("message", "路径不正确！");
        } else {
            map.put("success", 1);
            map.put("message", "删除成功！");
            filedel.delete();
        }
        return map;
    }

    private Map<String, Object> uploadFileUtil(MultipartFile file) {
        Map<String, Object> map = new HashMap<String, Object>();
        if (file.isEmpty()) {
            map.put("success", 0);
            map.put("message", "文件不存在");
            return map;
        }
        String fileName = file.getOriginalFilename();  // 文件名
        String suffixName = fileName.substring(fileName.lastIndexOf("."));  // 后缀名
        File fileDir = new File(UPLOADED_FOLDER);
        fileName = UUID.randomUUID() + suffixName; // 新文件名
        String path = fileDir.getAbsolutePath();
        if (!fileDir.exists()) {
            fileDir.mkdir();
        }
        try {
            file.transferTo(new File(path, fileName));
            map.put("success", 1);
            map.put("message", "上传成功！");

            map.put("url", "../images/" + fileName);
            /*这样也可以*/
            //map.put("url", "/images/" + fileName);
        } catch (Exception e) {
            map.put("success", 0);
            map.put("message", "上传失败！");
            e.printStackTrace();
        }

        /*Map<String, Object> resultMap = new HashMap<String, Object>();
        String fileName = file.getOriginalFilename();
        //保存
        try {
            byte[] bytes = file.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());
            Files.write(path, bytes);
            resultMap.put("success", 1);
            resultMap.put("message", "上传成功！");
            resultMap.put("url", "../images/" + fileName);
        } catch (Exception e) {
            resultMap.put("success", 0);
            resultMap.put("message", "上传失败！");
            e.printStackTrace();
        }*/
        return map;
    }

    @ResponseBody
    @RequestMapping(value = "/fileup", method = RequestMethod.POST)
    public Map<String, Object> FileUpload(@RequestParam("file") MultipartFile file) {
        /*Map map = new HashMap<String, Object>();
        if (file.isEmpty()) {
            map.put("result", -1);
            return map;
        }
        String fileName = file.getOriginalFilename();  // 文件名
        String suffixName = fileName.substring(fileName.lastIndexOf("."));  // 后缀名
        StringBuilder stringBuilder = new StringBuilder();
        File fileDir = new File("src/main/resources/static/upload/");
        fileName = UUID.randomUUID() + suffixName; // 新文件名
        String path = fileDir.getAbsolutePath();
        ;
        if (!fileDir.exists()) {
            fileDir.mkdir();
        }
        try {
            file.transferTo(new File(path, fileName));
            map.put("result", 1);
            map.put("message", "ok");
            map.put("url", "/upload/" + fileName);
            *//* map.put("url", stringBuilder.append(path).append(fileName).toString());*//*
        } catch (Exception e) {
            map.put("result", 0);
            e.printStackTrace();
        }*/
        return uploadFileUtil(file);
    }

    @ResponseBody
    @RequestMapping(value = "/fileup1", method = RequestMethod.POST)
    public Map<String, Object> FileUpload1(@RequestParam("file") MultipartFile file, @RequestParam String params) {
        Map map = new HashMap<String, Object>();
        params = params.substring(params.lastIndexOf("/") + 1);
        if (EmptyUtil.isEmpty(params)) {
            map.put("success", 0);
            map.put("message", "路径为空！");
        } else {
            /*String url = "src/main/resources/static/" + params;
            File filedel1 = new File(url);
            String path1 = filedel1.getAbsolutePath();
            File filedel = new File(path1);
            if (!filedel.exists()) {
                map.put("return", 0);
                map.put("message", "路径不正确");
            } else {
                filedel.delete();
            }*/
            map = deleteFileUtil(params);
        }
        map = uploadFileUtil(file);
        /*if (file.isEmpty()) {
            map.put("result", -1);
            return map;
        }
        String fileName = file.getOriginalFilename();  // 文件名
        String suffixName = fileName.substring(fileName.lastIndexOf("."));  // 后缀名
        StringBuilder stringBuilder = new StringBuilder();
        File fileDir = new File("src/main/resources/static/upload/");
        fileName = UUID.randomUUID() + suffixName; // 新文件名
        String path = fileDir.getAbsolutePath();
        ;
        if (!fileDir.exists()) {
            fileDir.mkdir();
        }
        try {
            file.transferTo(new File(path, fileName));
            map.put("result", 1);
            map.put("message", "ok");
            map.put("url", "/upload/" + fileName);
            *//* map.put("url", stringBuilder.append(path).append(fileName).toString());*//*
        } catch (Exception e) {
            map.put("result", 0);
            e.printStackTrace();
        }*/
        return map;
    }

    @ResponseBody
    @RequestMapping(value = "/filede", method = RequestMethod.POST)
    public Object FileDelete(HttpServletRequest request) {
        String params = request.getParameter("params");
        Map map = new HashMap<String, Object>();
        if (EmptyUtil.isEmpty(params)) {
            map.put("success", 0);
            map.put("message", "路径为空！");
        }
   /*     String url = "src/main/resources/static/" + params;
        File fileDir = new File(url);
        String path = fileDir.getAbsolutePath();
        File file = new File(path);
        if (!file.exists()) {
            map.put("return", 0);
            map.put("message", "路径不正确");
            return map;
        }
        file.delete();
        map.put("return", 1);
        map.put("message", "删除成功");*/
        map = deleteFileUtil(params);
        return map;
    }


    @ResponseBody
    @RequestMapping(value = "/test1", method = RequestMethod.POST)
    public Map<String, Object> demo(@RequestParam(value = "editormd-image-file", required = false) MultipartFile file, HttpServletRequest request) {
/*        Map<String, Object> resultMap = new HashMap<String, Object>();
        String fileName = file.getOriginalFilename();
        //保存
        try {
            byte[] bytes = file.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());
            Files.write(path, bytes);
            resultMap.put("success", 1);
            resultMap.put("message", "上传成功！");
            resultMap.put("url", "../images/" + fileName);
        } catch (Exception e) {
            resultMap.put("success", 0);
            resultMap.put("message", "上传失败！");
            e.printStackTrace();
        }*/
        return uploadFileUtil(file);

    }
}